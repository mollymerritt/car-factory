package com.ex.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ex.beans.Car;
import com.ex.services.CarService;

@RestController
@RequestMapping("/cars")
public class CarController {
	
	@Autowired
	private CarService carService;
	
	@GetMapping(produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Car>> getAll() {
		List<Car> cars = carService.findAll();
		if (cars.size() == 0) {
			return new ResponseEntity<List<Car>>(cars, HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<List<Car>>(cars, HttpStatus.OK);
		}
	}
	
//	@GetMapping(value="/{make}+{model}+{year}+{trim}",
//			produces=MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Car> getById(@PathVariable CarId carId) {
//		return new ResponseEntity<Car>(carService.findById(carId), HttpStatus.OK);
//	}
	
	@GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Car> getById(@PathVariable int id) {
		Car car = carService.findById(id);
		return car == null
				? new ResponseEntity<Car>(car, HttpStatus.NOT_FOUND)
				: new ResponseEntity<Car>(car, HttpStatus.OK);
	}
	
	@PostMapping(consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Car> addCar(@RequestBody Car car) {
		car = carService.addCar(car);
		System.out.println(car);
		if (car == null) {
			return new ResponseEntity<Car>(car, HttpStatus.CONFLICT);
		} else {
			return new ResponseEntity<Car>(car, HttpStatus.CREATED);
		}
	}
	
	@PutMapping(consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Car> updateCar(@RequestBody Car car) {
		
	}
	
	@DeleteMapping
	public ResponseEntity<Car> deleteCar(@RequestBody Car car) {
		carService.delete(car);
		return new ResponseEntity<Car>(car, HttpStatus.OK);
	}

}
